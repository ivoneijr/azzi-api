// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PROFESSIONAL
}

model User {
  id String @id @default(cuid())

  email    String   @unique
  password String
  role     UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile         Profile?
  ServiceProvider ServiceProvider?
  PhotoSession    PhotoSession[]

  @@map("users")
}

model Profile {
  id        String  @id @default(cuid())
  name      String
  avatarUrl String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model ServiceProvider {
  id       String  @id @default(cuid())
  slug     String  @unique
  location String
  isActive Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  packages      Package[]
  photoSessions PhotoSession[]
  portfolio     Portfolio?

  @@map("service_providers")
}

model Package {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  title    String
  price    Float
  quantity Int

  @@map("packages")
}

model PhotoSession {
  id                String          @id @default(cuid())
  serviceProviderId String
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  clientId String
  client   User   @relation(fields: [clientId], references: [id])

  files File[]

  @@map("photo_sessions")
}

model File {
  id  String @id @default(cuid())
  url String

  photoSessionId String?
  photoSession   PhotoSession? @relation(fields: [photoSessionId], references: [id])

  portfolioId String?
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id])

  @@map("files")
}

model Portfolio {
  id                String          @id @default(cuid())
  serviceProviderId String          @unique
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  files File[]

  @@map("portfolios")
}
